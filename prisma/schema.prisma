datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  postUpdatesMetadata YPostUpdateMetadata[]

  content Content[]
  permissions Permission[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Yjs

model YPost {
  rawTitle String @default("")
  title String @unique
  id    String @id @default(cuid())

  inRelations  YPostRelation[] @relation("toPost") /// Used for relations to (Manual - By script).
  outRelations YPostRelation[] @relation("fromPost") /// Used for relations from (Has been applied to).

  postUpdates YPostUpdate[]

  html Html?

  lastUpdated      DateTime @default(now())
  createdTimestamp DateTime @default(now())
}

model YPostRelation {
  isSystem Boolean

  fromPost   YPost  @relation("fromPost", fields: [fromPostId], references: [id], onDelete: Cascade)
  fromPostId String
  toPost     YPost  @relation("toPost", fields: [toPostId], references: [id], onDelete: Cascade)
  toPostId   String

  @@id([fromPostId, toPostId])
}

model YPostUpdate {
  id String @id @default(cuid())

  content String @db.Text

  post   YPost  @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  metadata   YPostUpdateMetadata @relation(fields: [metadataId], references: [id], onDelete: Cascade)
  metadataId String              @unique

  createdTimestamp DateTime @default(now())
}

model YPostUpdateMetadata {
  id String @id @default(cuid())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  postUpdate YPostUpdate?
}

model WhitelistedAccounts {
  id String @id @default(cuid())

  provider          String
  providerAccountId String
}

model Content {
  id String @id @default(cuid())

  hash String @unique
  name String

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  createdAt DateTime @default(now())
}

enum Permissions {
  BLOCKED
  MODERATE
}

model Permission {
  id String @id @default(cuid())

  user User @relation(fields: [userId], references: [id])
  userId String

  type Permissions
}

model Html {
  id String @id @default(cuid())

  post YPost @relation(fields: [postId], references: [id])
  postId String @unique

  content String
}
